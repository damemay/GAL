const unsigned char phong_frag[] =
	"#version 330 core\n\nout vec4 color;\n\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n   "
	" vec3 specular;\n    float shininess;\n\n    sampler2D diffuse_tex;\n    sampler2D normal_tex;\n    "
	"sampler2D specular_tex;\n\n    bool diffuse_tex_exists;\n    bool normal_tex_exists;\n    bool specu"
	"lar_tex_exists;\n};\n\nstruct Light {\n    vec3 position;\n    vec3 direction;\n\n    vec3 ambient;\n"
	"    vec3 diffuse;\n    vec3 specular;\n\n    bool directional;\n\n    float linear;\n    float quadr"
	"atic;\n};\n\nstruct Fog {\n    vec3 color;\n    float near;\n    float far;\n};\n\nin vec2 uv0;\nin "
	"vec3 wpos;\nin vec3 norm;\n\nuniform vec3 camera_position;\nuniform Material material;\nuniform Ligh"
	"t light;\nuniform Fog fog;\n\nfloat lin_depth(float depth) {\n    float z = depth*2.0-1.0;\n    retu"
	"rn (2.0*fog.near*fog.far)/(fog.far+fog.near-z*(fog.far-fog.near));\n}\n\nvoid main()\n{\n    if(text"
	"ure(material.diffuse_tex, uv0).a < 0.1) discard;\n\n    vec3 ambient;\n    if(material.diffuse_tex_e"
	"xists) {\n        ambient = light.ambient * texture(material.diffuse_tex, uv0).rgb;\n    } else {\n "
	"       ambient = light.ambient * material.ambient;\n    }\n \n    vec3 normal;\n    if(material.norm"
	"al_tex_exists) {\n        vec3 tangent = texture(material.normal_tex, uv0).rgb * 2.0 - 1.0;\n       "
	" vec3 q1 = dFdx(wpos);\n        vec3 q2 = dFdy(wpos);\n        vec2 st1 = dFdx(uv0);\n        vec2 s"
	"t2 = dFdy(uv0);\n        vec3 n = normalize(norm);\n        vec3 t = normalize(q1*st2.t-q2*st1.t);\n"
	"        vec3 b = -normalize(cross(n,t));\n        mat3 tbn = mat3(t,b,n);\n        normal = normaliz"
	"e(tbn*tangent);\n    } else {\n        normal = normalize(norm);\n    }\n    vec3 light_dir;\n    if"
	"(light.directional) {\n        light_dir = normalize(-light.direction);\n    } else {\n        light"
	"_dir = normalize(light.position-wpos);\n    }\n    float diff = max(dot(normal, light_dir), 0.0);\n "
	"   vec3 diffuse;\n    if(material.diffuse_tex_exists) {\n        diffuse = light.diffuse * diff * te"
	"xture(material.diffuse_tex, uv0).rgb;\n    } else {\n        diffuse = light.diffuse * (diff * mater"
	"ial.diffuse);\n    }\n\n    vec3 view_dir = normalize(camera_position - wpos);\n    vec3 reflect_dir"
	" = reflect(-light_dir, normal);\n    float spec;\n    if(material.shininess > 0) {\n        spec = p"
	"ow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);\n    } else {\n        spec = pow(max("
	"dot(view_dir, reflect_dir), 0.0), 0);\n    }\n    vec3 specular;\n    if(material.specular_tex_exist"
	"s) {\n        specular = light.specular * spec * texture(material.specular_tex, uv0).rgb;\n    } els"
	"e if(material.diffuse_tex_exists) {\n        specular = light.specular * spec * texture(material.dif"
	"fuse_tex, uv0).rgb;\n    } else {\n        specular = light.specular * (spec * material.specular);\n"
	"    }\n\n    if(!light.directional) {\n        float dist = length(light.position-wpos);\n        fl"
	"oat attent = 1.0/(1.0+light.linear*dist+light.quadratic*(dist*dist));\n        ambient *= attent;\n "
	"       diffuse *= attent;\n        specular *= attent;\n    }\n\n    vec3 result = ambient + diffuse"
	" + specular;\n    float fog_factor = lin_depth(gl_FragCoord.z)/fog.far;\n    fog_factor = clamp(fog_"
	"factor, 0.0, 1.0);\n\n    color = mix(vec4(result,1.0), vec4(fog.color,1.0), fog_factor);\n    //col"
	"or = vec4(result, 1.0);\n}\n";
const unsigned int phong_frag_len = 3204;
