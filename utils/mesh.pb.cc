// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh.proto

#include "mesh.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace glp_util {
        template <typename>
PROTOBUF_CONSTEXPR Mesh_Vec3::Mesh_Vec3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
    } {}
struct Mesh_Vec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mesh_Vec3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mesh_Vec3DefaultTypeInternal() {}
  union {
    Mesh_Vec3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mesh_Vec3DefaultTypeInternal _Mesh_Vec3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Mesh_Vec2::Mesh_Vec2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
    } {}
struct Mesh_Vec2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mesh_Vec2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mesh_Vec2DefaultTypeInternal() {}
  union {
    Mesh_Vec2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mesh_Vec2DefaultTypeInternal _Mesh_Vec2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Mesh_Vertex::Mesh_Vertex(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.normal_)*/ nullptr,
      /*decltype(_impl_.uv_)*/ nullptr,
    } {}
struct Mesh_VertexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mesh_VertexDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mesh_VertexDefaultTypeInternal() {}
  union {
    Mesh_Vertex _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mesh_VertexDefaultTypeInternal _Mesh_Vertex_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Mesh::Mesh(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.vertices_)*/ {},
      /*decltype(_impl_.indices_)*/ {},
      /*decltype(_impl_.textures_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDefaultTypeInternal _Mesh_default_instance_;
}  // namespace glp_util
static ::_pb::Metadata file_level_metadata_mesh_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_mesh_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mesh_2eproto = nullptr;
const ::uint32_t TableStruct_mesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec3, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec3, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec2, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vec2, _impl_.y_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vertex, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vertex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vertex, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vertex, _impl_.normal_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh_Vertex, _impl_.uv_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh, _impl_.vertices_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh, _impl_.indices_),
    PROTOBUF_FIELD_OFFSET(::glp_util::Mesh, _impl_.textures_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::glp_util::Mesh_Vec3)},
        {14, 24, -1, sizeof(::glp_util::Mesh_Vec2)},
        {26, 37, -1, sizeof(::glp_util::Mesh_Vertex)},
        {40, -1, -1, sizeof(::glp_util::Mesh)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::glp_util::_Mesh_Vec3_default_instance_._instance,
    &::glp_util::_Mesh_Vec2_default_instance_._instance,
    &::glp_util::_Mesh_Vertex_default_instance_._instance,
    &::glp_util::_Mesh_default_instance_._instance,
};
const char descriptor_table_protodef_mesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nmesh.proto\022\010glp_util\"\220\002\n\004Mesh\022\'\n\010verti"
    "ces\030\001 \003(\0132\025.glp_util.Mesh.Vertex\022\017\n\007indi"
    "ces\030\002 \003(\r\022\020\n\010textures\030\003 \003(\t\032\'\n\004Vec3\022\t\n\001x"
    "\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\032\034\n\004Vec2\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\032u\n\006Vertex\022%\n\010position"
    "\030\001 \002(\0132\023.glp_util.Mesh.Vec3\022#\n\006normal\030\002 "
    "\002(\0132\023.glp_util.Mesh.Vec3\022\037\n\002uv\030\003 \002(\0132\023.g"
    "lp_util.Mesh.Vec2"
};
static ::absl::once_flag descriptor_table_mesh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mesh_2eproto = {
    false,
    false,
    297,
    descriptor_table_protodef_mesh_2eproto,
    "mesh.proto",
    &descriptor_table_mesh_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_mesh_2eproto::offsets,
    file_level_metadata_mesh_2eproto,
    file_level_enum_descriptors_mesh_2eproto,
    file_level_service_descriptors_mesh_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mesh_2eproto_getter() {
  return &descriptor_table_mesh_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mesh_2eproto(&descriptor_table_mesh_2eproto);
namespace glp_util {
// ===================================================================

class Mesh_Vec3::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh_Vec3>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Mesh_Vec3::Mesh_Vec3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:glp_util.Mesh.Vec3)
}
Mesh_Vec3::Mesh_Vec3(const Mesh_Vec3& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:glp_util.Mesh.Vec3)
}
inline void Mesh_Vec3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
  };
}
Mesh_Vec3::~Mesh_Vec3() {
  // @@protoc_insertion_point(destructor:glp_util.Mesh.Vec3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Mesh_Vec3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Mesh_Vec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Mesh_Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:glp_util.Mesh.Vec3)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Mesh_Vec3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Mesh_Vec3::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Mesh_Vec3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.x_)}},
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.y_)}},
    // required float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float z = 3;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Mesh_Vec3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glp_util.Mesh.Vec3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glp_util.Mesh.Vec3)
  return target;
}

::size_t Mesh_Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glp_util.Mesh.Vec3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // required float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Mesh_Vec3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Mesh_Vec3::MergeImpl
};
const ::google::protobuf::Message::ClassData*Mesh_Vec3::GetClassData() const { return &_class_data_; }


void Mesh_Vec3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Mesh_Vec3*>(&to_msg);
  auto& from = static_cast<const Mesh_Vec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:glp_util.Mesh.Vec3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh_Vec3::CopyFrom(const Mesh_Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glp_util.Mesh.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Mesh_Vec3::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Mesh_Vec3::InternalSwap(Mesh_Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.z_)
      + sizeof(Mesh_Vec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Mesh_Vec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Mesh_Vec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mesh_2eproto_getter, &descriptor_table_mesh_2eproto_once,
      file_level_metadata_mesh_2eproto[0]);
}
// ===================================================================

class Mesh_Vec2::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh_Vec2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Mesh_Vec2::Mesh_Vec2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:glp_util.Mesh.Vec2)
}
Mesh_Vec2::Mesh_Vec2(const Mesh_Vec2& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:glp_util.Mesh.Vec2)
}
inline void Mesh_Vec2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
  };
}
Mesh_Vec2::~Mesh_Vec2() {
  // @@protoc_insertion_point(destructor:glp_util.Mesh.Vec2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Mesh_Vec2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Mesh_Vec2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Mesh_Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:glp_util.Mesh.Vec2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Mesh_Vec2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Mesh_Vec2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Mesh_Vec2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.y_)}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Mesh_Vec2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glp_util.Mesh.Vec2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glp_util.Mesh.Vec2)
  return target;
}

::size_t Mesh_Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glp_util.Mesh.Vec2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Mesh_Vec2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Mesh_Vec2::MergeImpl
};
const ::google::protobuf::Message::ClassData*Mesh_Vec2::GetClassData() const { return &_class_data_; }


void Mesh_Vec2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Mesh_Vec2*>(&to_msg);
  auto& from = static_cast<const Mesh_Vec2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:glp_util.Mesh.Vec2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh_Vec2::CopyFrom(const Mesh_Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glp_util.Mesh.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Mesh_Vec2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Mesh_Vec2::InternalSwap(Mesh_Vec2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.y_)
      + sizeof(Mesh_Vec2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Mesh_Vec2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Mesh_Vec2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mesh_2eproto_getter, &descriptor_table_mesh_2eproto_once,
      file_level_metadata_mesh_2eproto[1]);
}
// ===================================================================

class Mesh_Vertex::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh_Vertex>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_._has_bits_);
  static const ::glp_util::Mesh_Vec3& position(const Mesh_Vertex* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::glp_util::Mesh_Vec3& normal(const Mesh_Vertex* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::glp_util::Mesh_Vec2& uv(const Mesh_Vertex* msg);
  static void set_has_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::glp_util::Mesh_Vec3& Mesh_Vertex::_Internal::position(const Mesh_Vertex* msg) {
  return *msg->_impl_.position_;
}
const ::glp_util::Mesh_Vec3& Mesh_Vertex::_Internal::normal(const Mesh_Vertex* msg) {
  return *msg->_impl_.normal_;
}
const ::glp_util::Mesh_Vec2& Mesh_Vertex::_Internal::uv(const Mesh_Vertex* msg) {
  return *msg->_impl_.uv_;
}
Mesh_Vertex::Mesh_Vertex(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:glp_util.Mesh.Vertex)
}
Mesh_Vertex::Mesh_Vertex(const Mesh_Vertex& from) : ::google::protobuf::Message() {
  Mesh_Vertex* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.normal_){nullptr},
      decltype(_impl_.uv_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::glp_util::Mesh_Vec3(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.normal_ = new ::glp_util::Mesh_Vec3(*from._impl_.normal_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.uv_ = new ::glp_util::Mesh_Vec2(*from._impl_.uv_);
  }

  // @@protoc_insertion_point(copy_constructor:glp_util.Mesh.Vertex)
}
inline void Mesh_Vertex::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.normal_){nullptr},
      decltype(_impl_.uv_){nullptr},
  };
}
Mesh_Vertex::~Mesh_Vertex() {
  // @@protoc_insertion_point(destructor:glp_util.Mesh.Vertex)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Mesh_Vertex::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.normal_;
  if (this != internal_default_instance()) delete _impl_.uv_;
}
void Mesh_Vertex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Mesh_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:glp_util.Mesh.Vertex)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.normal_ != nullptr);
      _impl_.normal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.uv_ != nullptr);
      _impl_.uv_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Mesh_Vertex::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Mesh_Vertex::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Mesh_Vertex_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .glp_util.Mesh.Vec3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.position_)}},
    // required .glp_util.Mesh.Vec3 normal = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.normal_)}},
    // required .glp_util.Mesh.Vec2 uv = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.uv_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .glp_util.Mesh.Vec3 position = 1;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required .glp_util.Mesh.Vec3 normal = 2;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.normal_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required .glp_util.Mesh.Vec2 uv = 3;
    {PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.uv_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::glp_util::Mesh_Vec3>()},
    {::_pbi::TcParser::GetTable<::glp_util::Mesh_Vec3>()},
    {::_pbi::TcParser::GetTable<::glp_util::Mesh_Vec2>()},
  }}, {{
  }},
};

::uint8_t* Mesh_Vertex::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glp_util.Mesh.Vertex)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .glp_util.Mesh.Vec3 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // required .glp_util.Mesh.Vec3 normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  // required .glp_util.Mesh.Vec2 uv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::uv(this),
        _Internal::uv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glp_util.Mesh.Vertex)
  return target;
}

::size_t Mesh_Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glp_util.Mesh.Vertex)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // required .glp_util.Mesh.Vec3 position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // required .glp_util.Mesh.Vec3 normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.normal_);
    }

    // required .glp_util.Mesh.Vec2 uv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.uv_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Mesh_Vertex::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Mesh_Vertex::MergeImpl
};
const ::google::protobuf::Message::ClassData*Mesh_Vertex::GetClassData() const { return &_class_data_; }


void Mesh_Vertex::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Mesh_Vertex*>(&to_msg);
  auto& from = static_cast<const Mesh_Vertex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:glp_util.Mesh.Vertex)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::glp_util::Mesh_Vec3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normal()->::glp_util::Mesh_Vec3::MergeFrom(
          from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uv()->::glp_util::Mesh_Vec2::MergeFrom(
          from._internal_uv());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh_Vertex::CopyFrom(const Mesh_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glp_util.Mesh.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Mesh_Vertex::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.normal_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.uv_->IsInitialized()) return false;
  }
  return true;
}

void Mesh_Vertex::InternalSwap(Mesh_Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.uv_)
      + sizeof(Mesh_Vertex::_impl_.uv_)
      - PROTOBUF_FIELD_OFFSET(Mesh_Vertex, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Mesh_Vertex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mesh_2eproto_getter, &descriptor_table_mesh_2eproto_once,
      file_level_metadata_mesh_2eproto[2]);
}
// ===================================================================

class Mesh::_Internal {
 public:
};

Mesh::Mesh(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:glp_util.Mesh)
}
Mesh::Mesh(const Mesh& from) : ::google::protobuf::Message() {
  Mesh* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_},
      decltype(_impl_.indices_){from._impl_.indices_},
      decltype(_impl_.textures_){from._impl_.textures_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:glp_util.Mesh)
}
inline void Mesh::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena},
      decltype(_impl_.indices_){arena},
      decltype(_impl_.textures_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:glp_util.Mesh)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Mesh::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.indices_.~RepeatedField();
  _internal_mutable_textures()->~RepeatedPtrField();
}
void Mesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:glp_util.Mesh)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vertices()->Clear();
  _internal_mutable_indices()->Clear();
  _internal_mutable_textures()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Mesh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 30, 2> Mesh::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Mesh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .glp_util.Mesh.Vertex vertices = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.vertices_)}},
    // repeated uint32 indices = 2;
    {::_pbi::TcParser::FastV32R1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.indices_)}},
    // repeated string textures = 3;
    {::_pbi::TcParser::FastSR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Mesh, _impl_.textures_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .glp_util.Mesh.Vertex vertices = 1;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.vertices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint32 indices = 2;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.indices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated string textures = 3;
    {PROTOBUF_FIELD_OFFSET(Mesh, _impl_.textures_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::glp_util::Mesh_Vertex>()},
  }}, {{
    "\15\0\0\10\0\0\0\0"
    "glp_util.Mesh"
    "textures"
  }},
};

::uint8_t* Mesh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glp_util.Mesh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .glp_util.Mesh.Vertex vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 indices = 2;
  for (int i = 0, n = this->_internal_indices_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_indices().Get(i), target);
  }

  // repeated string textures = 3;
  for (int i = 0, n = this->_internal_textures_size(); i < n; ++i) {
    const auto& s = this->_internal_textures().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "glp_util.Mesh.textures");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glp_util.Mesh)
  return target;
}

::size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glp_util.Mesh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .glp_util.Mesh.Vertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_internal_vertices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated uint32 indices = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_indices())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_indices_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated string textures = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_textures().size());
  for (int i = 0, n = _internal_textures().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_textures().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Mesh::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Mesh::MergeImpl
};
const ::google::protobuf::Message::ClassData*Mesh::GetClassData() const { return &_class_data_; }


void Mesh::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Mesh*>(&to_msg);
  auto& from = static_cast<const Mesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:glp_util.Mesh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_indices()->MergeFrom(from._internal_indices());
  _this->_internal_mutable_textures()->MergeFrom(from._internal_textures());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glp_util.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Mesh::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(_internal_vertices()))
    return false;
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  _impl_.textures_.InternalSwap(&other->_impl_.textures_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mesh_2eproto_getter, &descriptor_table_mesh_2eproto_once,
      file_level_metadata_mesh_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace glp_util
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
