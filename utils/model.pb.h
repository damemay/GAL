// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
namespace glp_util {
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Model_Mesh;
class Model_MeshDefaultTypeInternal;
extern Model_MeshDefaultTypeInternal _Model_Mesh_default_instance_;
class Model_Mesh_Vec2;
class Model_Mesh_Vec2DefaultTypeInternal;
extern Model_Mesh_Vec2DefaultTypeInternal _Model_Mesh_Vec2_default_instance_;
class Model_Mesh_Vec3;
class Model_Mesh_Vec3DefaultTypeInternal;
extern Model_Mesh_Vec3DefaultTypeInternal _Model_Mesh_Vec3_default_instance_;
class Model_Mesh_Vertex;
class Model_Mesh_VertexDefaultTypeInternal;
extern Model_Mesh_VertexDefaultTypeInternal _Model_Mesh_Vertex_default_instance_;
}  // namespace glp_util
PROTOBUF_NAMESPACE_OPEN
template<> ::glp_util::Model* Arena::CreateMaybeMessage<::glp_util::Model>(Arena*);
template<> ::glp_util::Model_Mesh* Arena::CreateMaybeMessage<::glp_util::Model_Mesh>(Arena*);
template<> ::glp_util::Model_Mesh_Vec2* Arena::CreateMaybeMessage<::glp_util::Model_Mesh_Vec2>(Arena*);
template<> ::glp_util::Model_Mesh_Vec3* Arena::CreateMaybeMessage<::glp_util::Model_Mesh_Vec3>(Arena*);
template<> ::glp_util::Model_Mesh_Vertex* Arena::CreateMaybeMessage<::glp_util::Model_Mesh_Vertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace glp_util {

// ===================================================================

class Model_Mesh_Vec3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glp_util.Model.Mesh.Vec3) */ {
 public:
  inline Model_Mesh_Vec3() : Model_Mesh_Vec3(nullptr) {};
  virtual ~Model_Mesh_Vec3();

  Model_Mesh_Vec3(const Model_Mesh_Vec3& from);
  Model_Mesh_Vec3(Model_Mesh_Vec3&& from) noexcept
    : Model_Mesh_Vec3() {
    *this = ::std::move(from);
  }

  inline Model_Mesh_Vec3& operator=(const Model_Mesh_Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model_Mesh_Vec3& operator=(Model_Mesh_Vec3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model_Mesh_Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model_Mesh_Vec3* internal_default_instance() {
    return reinterpret_cast<const Model_Mesh_Vec3*>(
               &_Model_Mesh_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Model_Mesh_Vec3& a, Model_Mesh_Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Model_Mesh_Vec3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model_Mesh_Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model_Mesh_Vec3* New() const final {
    return CreateMaybeMessage<Model_Mesh_Vec3>(nullptr);
  }

  Model_Mesh_Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model_Mesh_Vec3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model_Mesh_Vec3& from);
  void MergeFrom(const Model_Mesh_Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model_Mesh_Vec3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glp_util.Model.Mesh.Vec3";
  }
  protected:
  explicit Model_Mesh_Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:glp_util.Model.Mesh.Vec3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Model_Mesh_Vec2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glp_util.Model.Mesh.Vec2) */ {
 public:
  inline Model_Mesh_Vec2() : Model_Mesh_Vec2(nullptr) {};
  virtual ~Model_Mesh_Vec2();

  Model_Mesh_Vec2(const Model_Mesh_Vec2& from);
  Model_Mesh_Vec2(Model_Mesh_Vec2&& from) noexcept
    : Model_Mesh_Vec2() {
    *this = ::std::move(from);
  }

  inline Model_Mesh_Vec2& operator=(const Model_Mesh_Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model_Mesh_Vec2& operator=(Model_Mesh_Vec2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model_Mesh_Vec2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model_Mesh_Vec2* internal_default_instance() {
    return reinterpret_cast<const Model_Mesh_Vec2*>(
               &_Model_Mesh_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Model_Mesh_Vec2& a, Model_Mesh_Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Model_Mesh_Vec2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model_Mesh_Vec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model_Mesh_Vec2* New() const final {
    return CreateMaybeMessage<Model_Mesh_Vec2>(nullptr);
  }

  Model_Mesh_Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model_Mesh_Vec2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model_Mesh_Vec2& from);
  void MergeFrom(const Model_Mesh_Vec2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model_Mesh_Vec2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glp_util.Model.Mesh.Vec2";
  }
  protected:
  explicit Model_Mesh_Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:glp_util.Model.Mesh.Vec2)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Model_Mesh_Vertex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glp_util.Model.Mesh.Vertex) */ {
 public:
  inline Model_Mesh_Vertex() : Model_Mesh_Vertex(nullptr) {};
  virtual ~Model_Mesh_Vertex();

  Model_Mesh_Vertex(const Model_Mesh_Vertex& from);
  Model_Mesh_Vertex(Model_Mesh_Vertex&& from) noexcept
    : Model_Mesh_Vertex() {
    *this = ::std::move(from);
  }

  inline Model_Mesh_Vertex& operator=(const Model_Mesh_Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model_Mesh_Vertex& operator=(Model_Mesh_Vertex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model_Mesh_Vertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model_Mesh_Vertex* internal_default_instance() {
    return reinterpret_cast<const Model_Mesh_Vertex*>(
               &_Model_Mesh_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Model_Mesh_Vertex& a, Model_Mesh_Vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(Model_Mesh_Vertex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model_Mesh_Vertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model_Mesh_Vertex* New() const final {
    return CreateMaybeMessage<Model_Mesh_Vertex>(nullptr);
  }

  Model_Mesh_Vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model_Mesh_Vertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model_Mesh_Vertex& from);
  void MergeFrom(const Model_Mesh_Vertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model_Mesh_Vertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glp_util.Model.Mesh.Vertex";
  }
  protected:
  explicit Model_Mesh_Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kNormalFieldNumber = 2,
    kUvFieldNumber = 3,
  };
  // required .glp_util.Model.Mesh.Vec3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::glp_util::Model_Mesh_Vec3& position() const;
  ::glp_util::Model_Mesh_Vec3* release_position();
  ::glp_util::Model_Mesh_Vec3* mutable_position();
  void set_allocated_position(::glp_util::Model_Mesh_Vec3* position);
  private:
  const ::glp_util::Model_Mesh_Vec3& _internal_position() const;
  ::glp_util::Model_Mesh_Vec3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::glp_util::Model_Mesh_Vec3* position);
  ::glp_util::Model_Mesh_Vec3* unsafe_arena_release_position();

  // required .glp_util.Model.Mesh.Vec3 normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::glp_util::Model_Mesh_Vec3& normal() const;
  ::glp_util::Model_Mesh_Vec3* release_normal();
  ::glp_util::Model_Mesh_Vec3* mutable_normal();
  void set_allocated_normal(::glp_util::Model_Mesh_Vec3* normal);
  private:
  const ::glp_util::Model_Mesh_Vec3& _internal_normal() const;
  ::glp_util::Model_Mesh_Vec3* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::glp_util::Model_Mesh_Vec3* normal);
  ::glp_util::Model_Mesh_Vec3* unsafe_arena_release_normal();

  // required .glp_util.Model.Mesh.Vec2 uv = 3;
  bool has_uv() const;
  private:
  bool _internal_has_uv() const;
  public:
  void clear_uv();
  const ::glp_util::Model_Mesh_Vec2& uv() const;
  ::glp_util::Model_Mesh_Vec2* release_uv();
  ::glp_util::Model_Mesh_Vec2* mutable_uv();
  void set_allocated_uv(::glp_util::Model_Mesh_Vec2* uv);
  private:
  const ::glp_util::Model_Mesh_Vec2& _internal_uv() const;
  ::glp_util::Model_Mesh_Vec2* _internal_mutable_uv();
  public:
  void unsafe_arena_set_allocated_uv(
      ::glp_util::Model_Mesh_Vec2* uv);
  ::glp_util::Model_Mesh_Vec2* unsafe_arena_release_uv();

  // @@protoc_insertion_point(class_scope:glp_util.Model.Mesh.Vertex)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::glp_util::Model_Mesh_Vec3* position_;
  ::glp_util::Model_Mesh_Vec3* normal_;
  ::glp_util::Model_Mesh_Vec2* uv_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Model_Mesh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glp_util.Model.Mesh) */ {
 public:
  inline Model_Mesh() : Model_Mesh(nullptr) {};
  virtual ~Model_Mesh();

  Model_Mesh(const Model_Mesh& from);
  Model_Mesh(Model_Mesh&& from) noexcept
    : Model_Mesh() {
    *this = ::std::move(from);
  }

  inline Model_Mesh& operator=(const Model_Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model_Mesh& operator=(Model_Mesh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model_Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model_Mesh* internal_default_instance() {
    return reinterpret_cast<const Model_Mesh*>(
               &_Model_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Model_Mesh& a, Model_Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Model_Mesh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model_Mesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model_Mesh* New() const final {
    return CreateMaybeMessage<Model_Mesh>(nullptr);
  }

  Model_Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model_Mesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model_Mesh& from);
  void MergeFrom(const Model_Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model_Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glp_util.Model.Mesh";
  }
  protected:
  explicit Model_Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Model_Mesh_Vec3 Vec3;
  typedef Model_Mesh_Vec2 Vec2;
  typedef Model_Mesh_Vertex Vertex;

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kIndicesFieldNumber = 2,
    kTexturesFieldNumber = 3,
  };
  // repeated .glp_util.Model.Mesh.Vertex vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::glp_util::Model_Mesh_Vertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh_Vertex >*
      mutable_vertices();
  private:
  const ::glp_util::Model_Mesh_Vertex& _internal_vertices(int index) const;
  ::glp_util::Model_Mesh_Vertex* _internal_add_vertices();
  public:
  const ::glp_util::Model_Mesh_Vertex& vertices(int index) const;
  ::glp_util::Model_Mesh_Vertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh_Vertex >&
      vertices() const;

  // repeated uint32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_indices();

  // repeated string textures = 3;
  int textures_size() const;
  private:
  int _internal_textures_size() const;
  public:
  void clear_textures();
  const std::string& textures(int index) const;
  std::string* mutable_textures(int index);
  void set_textures(int index, const std::string& value);
  void set_textures(int index, std::string&& value);
  void set_textures(int index, const char* value);
  void set_textures(int index, const char* value, size_t size);
  std::string* add_textures();
  void add_textures(const std::string& value);
  void add_textures(std::string&& value);
  void add_textures(const char* value);
  void add_textures(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& textures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_textures();
  private:
  const std::string& _internal_textures(int index) const;
  std::string* _internal_add_textures();
  public:

  // @@protoc_insertion_point(class_scope:glp_util.Model.Mesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh_Vertex > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> textures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Model PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glp_util.Model) */ {
 public:
  inline Model() : Model(nullptr) {};
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glp_util.Model";
  }
  protected:
  explicit Model(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Model_Mesh Mesh;

  // accessors -------------------------------------------------------

  enum : int {
    kMeshesFieldNumber = 1,
  };
  // repeated .glp_util.Model.Mesh meshes = 1;
  int meshes_size() const;
  private:
  int _internal_meshes_size() const;
  public:
  void clear_meshes();
  ::glp_util::Model_Mesh* mutable_meshes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh >*
      mutable_meshes();
  private:
  const ::glp_util::Model_Mesh& _internal_meshes(int index) const;
  ::glp_util::Model_Mesh* _internal_add_meshes();
  public:
  const ::glp_util::Model_Mesh& meshes(int index) const;
  ::glp_util::Model_Mesh* add_meshes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh >&
      meshes() const;

  // @@protoc_insertion_point(class_scope:glp_util.Model)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh > meshes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Model_Mesh_Vec3

// required float x = 1;
inline bool Model_Mesh_Vec3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Model_Mesh_Vec3::has_x() const {
  return _internal_has_x();
}
inline void Model_Mesh_Vec3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Model_Mesh_Vec3::_internal_x() const {
  return x_;
}
inline float Model_Mesh_Vec3::x() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vec3.x)
  return _internal_x();
}
inline void Model_Mesh_Vec3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Model_Mesh_Vec3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.Vec3.x)
}

// required float y = 2;
inline bool Model_Mesh_Vec3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Model_Mesh_Vec3::has_y() const {
  return _internal_has_y();
}
inline void Model_Mesh_Vec3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Model_Mesh_Vec3::_internal_y() const {
  return y_;
}
inline float Model_Mesh_Vec3::y() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vec3.y)
  return _internal_y();
}
inline void Model_Mesh_Vec3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Model_Mesh_Vec3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.Vec3.y)
}

// required float z = 3;
inline bool Model_Mesh_Vec3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Model_Mesh_Vec3::has_z() const {
  return _internal_has_z();
}
inline void Model_Mesh_Vec3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Model_Mesh_Vec3::_internal_z() const {
  return z_;
}
inline float Model_Mesh_Vec3::z() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vec3.z)
  return _internal_z();
}
inline void Model_Mesh_Vec3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Model_Mesh_Vec3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.Vec3.z)
}

// -------------------------------------------------------------------

// Model_Mesh_Vec2

// required float x = 1;
inline bool Model_Mesh_Vec2::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Model_Mesh_Vec2::has_x() const {
  return _internal_has_x();
}
inline void Model_Mesh_Vec2::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Model_Mesh_Vec2::_internal_x() const {
  return x_;
}
inline float Model_Mesh_Vec2::x() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vec2.x)
  return _internal_x();
}
inline void Model_Mesh_Vec2::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Model_Mesh_Vec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.Vec2.x)
}

// required float y = 2;
inline bool Model_Mesh_Vec2::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Model_Mesh_Vec2::has_y() const {
  return _internal_has_y();
}
inline void Model_Mesh_Vec2::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Model_Mesh_Vec2::_internal_y() const {
  return y_;
}
inline float Model_Mesh_Vec2::y() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vec2.y)
  return _internal_y();
}
inline void Model_Mesh_Vec2::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Model_Mesh_Vec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.Vec2.y)
}

// -------------------------------------------------------------------

// Model_Mesh_Vertex

// required .glp_util.Model.Mesh.Vec3 position = 1;
inline bool Model_Mesh_Vertex::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Model_Mesh_Vertex::has_position() const {
  return _internal_has_position();
}
inline void Model_Mesh_Vertex::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::glp_util::Model_Mesh_Vec3& Model_Mesh_Vertex::_internal_position() const {
  const ::glp_util::Model_Mesh_Vec3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::glp_util::Model_Mesh_Vec3*>(
      &::glp_util::_Model_Mesh_Vec3_default_instance_);
}
inline const ::glp_util::Model_Mesh_Vec3& Model_Mesh_Vertex::position() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vertex.position)
  return _internal_position();
}
inline void Model_Mesh_Vertex::unsafe_arena_set_allocated_position(
    ::glp_util::Model_Mesh_Vec3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:glp_util.Model.Mesh.Vertex.position)
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:glp_util.Model.Mesh.Vertex.position)
  _has_bits_[0] &= ~0x00000001u;
  ::glp_util::Model_Mesh_Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::glp_util::Model_Mesh_Vec3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::mutable_position() {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.Mesh.Vertex.position)
  return _internal_mutable_position();
}
inline void Model_Mesh_Vertex::set_allocated_position(::glp_util::Model_Mesh_Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:glp_util.Model.Mesh.Vertex.position)
}

// required .glp_util.Model.Mesh.Vec3 normal = 2;
inline bool Model_Mesh_Vertex::_internal_has_normal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || normal_ != nullptr);
  return value;
}
inline bool Model_Mesh_Vertex::has_normal() const {
  return _internal_has_normal();
}
inline void Model_Mesh_Vertex::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::glp_util::Model_Mesh_Vec3& Model_Mesh_Vertex::_internal_normal() const {
  const ::glp_util::Model_Mesh_Vec3* p = normal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::glp_util::Model_Mesh_Vec3*>(
      &::glp_util::_Model_Mesh_Vec3_default_instance_);
}
inline const ::glp_util::Model_Mesh_Vec3& Model_Mesh_Vertex::normal() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vertex.normal)
  return _internal_normal();
}
inline void Model_Mesh_Vertex::unsafe_arena_set_allocated_normal(
    ::glp_util::Model_Mesh_Vec3* normal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal_);
  }
  normal_ = normal;
  if (normal) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:glp_util.Model.Mesh.Vertex.normal)
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::release_normal() {
  auto temp = unsafe_arena_release_normal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:glp_util.Model.Mesh.Vertex.normal)
  _has_bits_[0] &= ~0x00000002u;
  ::glp_util::Model_Mesh_Vec3* temp = normal_;
  normal_ = nullptr;
  return temp;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::_internal_mutable_normal() {
  _has_bits_[0] |= 0x00000002u;
  if (normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::glp_util::Model_Mesh_Vec3>(GetArena());
    normal_ = p;
  }
  return normal_;
}
inline ::glp_util::Model_Mesh_Vec3* Model_Mesh_Vertex::mutable_normal() {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.Mesh.Vertex.normal)
  return _internal_mutable_normal();
}
inline void Model_Mesh_Vertex::set_allocated_normal(::glp_util::Model_Mesh_Vec3* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(normal);
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:glp_util.Model.Mesh.Vertex.normal)
}

// required .glp_util.Model.Mesh.Vec2 uv = 3;
inline bool Model_Mesh_Vertex::_internal_has_uv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uv_ != nullptr);
  return value;
}
inline bool Model_Mesh_Vertex::has_uv() const {
  return _internal_has_uv();
}
inline void Model_Mesh_Vertex::clear_uv() {
  if (uv_ != nullptr) uv_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::glp_util::Model_Mesh_Vec2& Model_Mesh_Vertex::_internal_uv() const {
  const ::glp_util::Model_Mesh_Vec2* p = uv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::glp_util::Model_Mesh_Vec2*>(
      &::glp_util::_Model_Mesh_Vec2_default_instance_);
}
inline const ::glp_util::Model_Mesh_Vec2& Model_Mesh_Vertex::uv() const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.Vertex.uv)
  return _internal_uv();
}
inline void Model_Mesh_Vertex::unsafe_arena_set_allocated_uv(
    ::glp_util::Model_Mesh_Vec2* uv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uv_);
  }
  uv_ = uv;
  if (uv) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:glp_util.Model.Mesh.Vertex.uv)
}
inline ::glp_util::Model_Mesh_Vec2* Model_Mesh_Vertex::release_uv() {
  auto temp = unsafe_arena_release_uv();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::glp_util::Model_Mesh_Vec2* Model_Mesh_Vertex::unsafe_arena_release_uv() {
  // @@protoc_insertion_point(field_release:glp_util.Model.Mesh.Vertex.uv)
  _has_bits_[0] &= ~0x00000004u;
  ::glp_util::Model_Mesh_Vec2* temp = uv_;
  uv_ = nullptr;
  return temp;
}
inline ::glp_util::Model_Mesh_Vec2* Model_Mesh_Vertex::_internal_mutable_uv() {
  _has_bits_[0] |= 0x00000004u;
  if (uv_ == nullptr) {
    auto* p = CreateMaybeMessage<::glp_util::Model_Mesh_Vec2>(GetArena());
    uv_ = p;
  }
  return uv_;
}
inline ::glp_util::Model_Mesh_Vec2* Model_Mesh_Vertex::mutable_uv() {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.Mesh.Vertex.uv)
  return _internal_mutable_uv();
}
inline void Model_Mesh_Vertex::set_allocated_uv(::glp_util::Model_Mesh_Vec2* uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uv_;
  }
  if (uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uv);
    if (message_arena != submessage_arena) {
      uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uv_ = uv;
  // @@protoc_insertion_point(field_set_allocated:glp_util.Model.Mesh.Vertex.uv)
}

// -------------------------------------------------------------------

// Model_Mesh

// repeated .glp_util.Model.Mesh.Vertex vertices = 1;
inline int Model_Mesh::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Model_Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Model_Mesh::clear_vertices() {
  vertices_.Clear();
}
inline ::glp_util::Model_Mesh_Vertex* Model_Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.Mesh.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh_Vertex >*
Model_Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:glp_util.Model.Mesh.vertices)
  return &vertices_;
}
inline const ::glp_util::Model_Mesh_Vertex& Model_Mesh::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::glp_util::Model_Mesh_Vertex& Model_Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.vertices)
  return _internal_vertices(index);
}
inline ::glp_util::Model_Mesh_Vertex* Model_Mesh::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::glp_util::Model_Mesh_Vertex* Model_Mesh::add_vertices() {
  // @@protoc_insertion_point(field_add:glp_util.Model.Mesh.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh_Vertex >&
Model_Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:glp_util.Model.Mesh.vertices)
  return vertices_;
}

// repeated uint32 indices = 2;
inline int Model_Mesh::_internal_indices_size() const {
  return indices_.size();
}
inline int Model_Mesh::indices_size() const {
  return _internal_indices_size();
}
inline void Model_Mesh::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Model_Mesh::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Model_Mesh::indices(int index) const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.indices)
  return _internal_indices(index);
}
inline void Model_Mesh::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.indices)
}
inline void Model_Mesh::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Add(value);
}
inline void Model_Mesh::add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:glp_util.Model.Mesh.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Model_Mesh::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Model_Mesh::indices() const {
  // @@protoc_insertion_point(field_list:glp_util.Model.Mesh.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Model_Mesh::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Model_Mesh::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:glp_util.Model.Mesh.indices)
  return _internal_mutable_indices();
}

// repeated string textures = 3;
inline int Model_Mesh::_internal_textures_size() const {
  return textures_.size();
}
inline int Model_Mesh::textures_size() const {
  return _internal_textures_size();
}
inline void Model_Mesh::clear_textures() {
  textures_.Clear();
}
inline std::string* Model_Mesh::add_textures() {
  // @@protoc_insertion_point(field_add_mutable:glp_util.Model.Mesh.textures)
  return _internal_add_textures();
}
inline const std::string& Model_Mesh::_internal_textures(int index) const {
  return textures_.Get(index);
}
inline const std::string& Model_Mesh::textures(int index) const {
  // @@protoc_insertion_point(field_get:glp_util.Model.Mesh.textures)
  return _internal_textures(index);
}
inline std::string* Model_Mesh::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.Mesh.textures)
  return textures_.Mutable(index);
}
inline void Model_Mesh::set_textures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.textures)
  textures_.Mutable(index)->assign(value);
}
inline void Model_Mesh::set_textures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:glp_util.Model.Mesh.textures)
  textures_.Mutable(index)->assign(std::move(value));
}
inline void Model_Mesh::set_textures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  textures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:glp_util.Model.Mesh.textures)
}
inline void Model_Mesh::set_textures(int index, const char* value, size_t size) {
  textures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:glp_util.Model.Mesh.textures)
}
inline std::string* Model_Mesh::_internal_add_textures() {
  return textures_.Add();
}
inline void Model_Mesh::add_textures(const std::string& value) {
  textures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:glp_util.Model.Mesh.textures)
}
inline void Model_Mesh::add_textures(std::string&& value) {
  textures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:glp_util.Model.Mesh.textures)
}
inline void Model_Mesh::add_textures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  textures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:glp_util.Model.Mesh.textures)
}
inline void Model_Mesh::add_textures(const char* value, size_t size) {
  textures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:glp_util.Model.Mesh.textures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model_Mesh::textures() const {
  // @@protoc_insertion_point(field_list:glp_util.Model.Mesh.textures)
  return textures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model_Mesh::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:glp_util.Model.Mesh.textures)
  return &textures_;
}

// -------------------------------------------------------------------

// Model

// repeated .glp_util.Model.Mesh meshes = 1;
inline int Model::_internal_meshes_size() const {
  return meshes_.size();
}
inline int Model::meshes_size() const {
  return _internal_meshes_size();
}
inline void Model::clear_meshes() {
  meshes_.Clear();
}
inline ::glp_util::Model_Mesh* Model::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:glp_util.Model.meshes)
  return meshes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh >*
Model::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:glp_util.Model.meshes)
  return &meshes_;
}
inline const ::glp_util::Model_Mesh& Model::_internal_meshes(int index) const {
  return meshes_.Get(index);
}
inline const ::glp_util::Model_Mesh& Model::meshes(int index) const {
  // @@protoc_insertion_point(field_get:glp_util.Model.meshes)
  return _internal_meshes(index);
}
inline ::glp_util::Model_Mesh* Model::_internal_add_meshes() {
  return meshes_.Add();
}
inline ::glp_util::Model_Mesh* Model::add_meshes() {
  // @@protoc_insertion_point(field_add:glp_util.Model.meshes)
  return _internal_add_meshes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glp_util::Model_Mesh >&
Model::meshes() const {
  // @@protoc_insertion_point(field_list:glp_util.Model.meshes)
  return meshes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace glp_util

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
